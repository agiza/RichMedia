<?php //$Id$

define('TEMPORARY_DIRECTORY', file_directory_path() .'/'. variable_get('richmedia_view_temp_dir', NULL));

/**
 * Module used to retrieve and cache stills.
 * Will use imagecache as resizer.
 */


/**
 * Implementation of hook_menu().
 */
function richmedia_view_menu() {
  $items = array();
  // standard imagecache callback.
  $items['admin/build/richmedia/view'] = array(
    'title' => 'View settings',
    'access arguments' => array('administer richmedia_view'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('richmedia_view_settings_form'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


/**
 * Implementation of hook_perm().
 * @link http://api.drupal.org/api/function/hook_perm/6
 */
function richmedia_view_perm() {
  return array('administer richmedia_view');
}


/**
 * Form definition function for the settings form.
 * @link http://api.drupal.org/api/function/hook_form/6
 */
function richmedia_view_settings_form() {
  $form = array();
  $form['richmedia_view_garbage_time'] = array(
    '#type' => 'select',
    '#title' => 'Timer for garbage collector',
    '#description' => 'Amount of interval between removal of temp files.',
    '#options' => array(
      0 => 'Never',
      86400 => 'Daily',
      604800 => 'Weekly',
      2629744 => 'Monthly',
      31556926 => 'Yearly',
    ),
    '#default_value' => variable_get('richmedia_view_garbage_time', 0),
  );

  $form['richmedia_view_temp_dir'] = array(
    '#type' => 'textfield',
    '#title' => 'Directory for temporary files',
    '#description' => 'Directory where files will be downloaded to',
    '#default_value' => variable_get('richmedia_view_temp_dir', ''),
    '#size' => 20,
  );

  return system_settings_form($form);
}

/**
 * Implementation of Hook_theme().
 */
function richmedia_view_theme() {
  return array(
    'richmedia_view_still' => array(
      'arguments' => array(
        'preset' => NULL,
        'still_id' => NULL,
        'alt' => NULL,
        'title' => NULL
      ),
    ),
    'richmedia_view' => array(
      'arguments' => array(
        'node'
      ),
      'template' => 'richmedia-view',
    ),
  );
}

/**
 * Theme function for a richmedia_still().
 */
function theme_richmedia_view_still($preset, $node, $order_id, $alt = '', $title = '', $attributes = NULL, $getsize = TRUE) {
  // Default values
  $file_url = '';

  // Get the information about this still.
  $still = module_invoke('richmedia_import', 'get_timecodes', $node->nid, $order_id);
  $temp_dir = TEMPORARY_DIRECTORY;
  // $temp_dir is a directory, check the directory and else create it.
  if (file_check_directory($temp_dir, FILE_CREATE_DIRECTORY)) {
    // Prepend the file to it based on the retrieved still;
    $file = rtrim(TEMPORARY_DIRECTORY, "/") .'/'. $still->mediafile_id;
    // Check if the file exists else get it.
    if (!file_exists($file) && ($still->status == 2 || $still->status == 0)) {
      // We need to do a new request for the file.
      richmedia_view_download_file($node, $still, $file);
    }
    return theme('imagecache', $preset, $file, $alt, $title, $attributes, $getsize);
  }
  return FALSE;
}


function richmedia_view_get_still_info($asset_id, $range = NULL, $flush = FALSE) {
  static $stills = array();

  if ($flush) {
    $stills = array();
  }

  if (!isset($stills[$asset_id])) {
    $user_id = variable_get('vpx_connector_username', NULL);
    $uploaded_still = richmedia_api_get_still($asset_id, $user_id, array());
    // Check if we have stills
    if (isset($uploaded_still->items->item->stills)) {
      // Loop through them.
      foreach($uploaded_still->items->item->stills as $key => $still_info) {
        $stills[$asset_id][(string) $still_info->still_order] = (object) array(
          'mediafile_id' => (string) $still_info->mediafile_id,
          'still_order' => (int) $still_info->still_order,
          'still_time_code' => (int) $still_info->still_time_code,
          'ticket' => (string) $still_info->ticket,
          'still_ticket' => ((strlen((string) $still_info->still_ticket)) ? (string) $still_info->still_ticket : (string) $still_info->output),
        );
      }
    }
  }

  return (isset($range) && isset($stills[$asset_id][$range])) ? $stills[$asset_id][$range] : $stills[$asset_id];
}


/**
 * Function to download a single still and store it in the temp directory.
 *
 * @todo Optimize the file downloading process, I think it could be MUCH
 *   faster and more efficient.
 */
function richmedia_view_download_file($node, $still, $file) {
  // Default values.
  $response = array();

  // Get the still information
  $still_info = richmedia_view_get_still_info($node->richmedia->asset_id, $still->placement);

  // Double check so database doesn't get overrun with php errors regarding the fopen/feof/fread.
  if (!strlen($still_info->still_ticket)) {
    watchdog('richmedia_view_download_file', print_r($still_info, TRUE));
    return FALSE;
  }

  // Open the local file for writing
  $local_file = fopen($file, 'wb+');
  // Open the remote file for reading
  $remote_file = fopen($still_info->still_ticket, 'rb');
  // While not end of file, we loop through the remote file
  while(!feof($remote_file)) {
    fwrite($local_file, fread($remote_file, 256));
  }
  // Close all connections
  fclose($local_file);
  fclose($remote_file);

  // Status 2 = Original still was removed but appearently needed again for rescaling.
  // We are deleting the stills to ensure all stills use the same file.
  if ($still->status == 2) {
    module_invoke('imagecache_image', 'flush', $file);
  }

  // Set the Status to 1, to ensure Cron knows what to do
  return db_query("UPDATE {richmedia_media} SET status = %d WHERE nid = %d and mediafile_id = '%s'", 1, $node->nid, $still->mediafile_id);
}

/**
 * Status 0 = No version on our server (usually new still).
 * Status 1 = Original still is on the server (Doesn't mean we have a rescaled version)
 * Status 2 = Only rescaled versions on server, original has been removed.
 */
function richmedia_view_cron() {
  // Check if we need to run garbage collector or not.
  if ((variable_get('richmedia_view_garbage_collector', time()) + variable_get('richmedia_view_garbage_time', 0)) > time()) {
    // Default values.
    $arguments = array();

    // Get all the files where we can delete the original files from.
    $result = db_query("SELECT mediafile_id FROM {richmedia_media} WHERE status = 1");
    while ($record = db_fetch_object($result)) {
      // Delete the original file and create array to update the database once we are done.
      file_delete(TEMPORARY_DIRECTORY .'/'. $record->mediafile_id);

      $arguments[] = $record->mediafile_id;
    }
    if (count($arguments)) {
      db_query("UPDATE {richmedia_media} SET status = 2 WHERE mediafile_id IN (". db_placeholders($arguments, 'varchar') .")", $arguments);
    }
  }
  variable_set('richmedia_view_garbage_collector', time());
}

/**
 * Get the slide information and create decent array of it.
 */
function richmedia_view_timecode_array($nid) {
  // Get Slide information
  $slides = richmedia_import_get_timecodes($nid);
  $info = array();
  if (is_array($slides) && count($slides)) {
    foreach($slides as $key => $slide) {
      $info[] = $slide->timecode / 1000;
    }
  }
  sort($info);
  return $info;
}

/**
 * Function for rebuilding a $time parameter in seconds, to a 00:00:00 format.
 *
 * This function is meant for displaying hours, minutes and seconds. Years,
 * months and days are skipped and not displayed.
 *
 * @param int $time Timestamp in seconds.
 */
function richmedia_view_parse_time($time) {
  $hours = floor($time / 3600);
  $minutes = floor(($time % 3600) / 60);
  $seconds = floor((($time %3600) % 60));
  return sprintf("%02d:%02d:%02d", $hours, $minutes, $seconds);
}

/**
 * Implement preprocessing
 * @param array $vars
 */
function richmedia_view_preprocess_richmedia_view(&$vars) {
  $vars['node'] = &$vars[0];
  $vars['base_path'] = base_path();
  $vars['node']->richmedia->still_timing = richmedia_view_timecode_array($vars['node']->nid);

  $videos = array();
  if (isset($vars['node']->richmedia->mediafiles) && is_array($vars['node']->richmedia->mediafiles)) {
    module_load_include('inc', 'richmedia');
    $user_id = variable_get('vpx_connector_username', NULL);
    foreach($vars['node']->richmedia->mediafiles as $key => $mediafile) {
      $videos[$key] = richmedia_get_video_url($vars['node']->richmedia->asset_id, $mediafile);
    }
  }
  $vars['node']->richmedia->videos = $videos;
}

/**
 * Implements preprocessing
 * @param array $vars
 *
 * @todo Remove or refactor.
 */
function old_richmedia_view_preprocess_node(&$vars) {
  $vars['base_path'] = base_path();
  if (isset($vars['node']->richmedia) && $vars['page']) {
    $videos = array();
    if (isset($vars['richmedia']->mediafiles) && is_array($vars['richmedia']->mediafiles)) {
      module_load_include('inc', 'richmedia');
      $user_id = variable_get('vpx_connector_username', NULL);
      foreach($vars['richmedia']->mediafiles as $key => $value) {
        if($output = richmedia_api_play_call($vars['richmedia']->asset_id, $user_id, array('profile_id' => variable_get('richmedia_import_default_transcode_profile', 1), 'original_mediafile_id' => $value))) {
          $video_url = (string) $output->items->item->output;
          $time_codes = richmedia_view_timecode_array($vars['nid']);
          $videos[$key] = array('source' => $video_url, 'timecodes' => $time_codes);
        }
      }
    }
    $vars['richmedia']->videos = $videos;
  }
}


